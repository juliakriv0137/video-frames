import os
import subprocess
import uuid

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å –±–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ GitHub
GITHUB_RAW_URL = "https://raw.githubusercontent.com/juliakriv0137/video-frames/refs/heads/main/"

def extract_frames(video_path, output_folder, frame_rate):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π"""
    os.makedirs(output_folder, exist_ok=True)
    
    command = [
        "ffmpeg", "-i", video_path, "-vf",
        f"fps=1/{frame_rate}", f"{output_folder}/frame_%04d.png"
    ]
    subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

def count_frames(output_folder):
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤"""
    return len([f for f in os.listdir(output_folder) if f.endswith(".png")])

def generate_github_links(output_folder):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ GitHub –¥–ª—è –∫–∞–¥—Ä–æ–≤"""
    frame_links = []
    folder_name = os.path.basename(output_folder)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ (UUID)
    
    for i, frame in enumerate(sorted(os.listdir(output_folder)), start=1):
        if frame.endswith(".png"):
            frame_name = f"frame_{i:04d}.png"  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            frame_path = f"{folder_name}/{frame_name}"
            frame_links.append(f"{GITHUB_RAW_URL}{frame_path}")

    return frame_links

def main():
    video_url = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Instagram –∏–ª–∏ YouTube: ")
    frame_rate = input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö): ")

    try:
        frame_rate = float(frame_rate)
    except ValueError:
        print("–û—à–∏–±–∫–∞: —á–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
    unique_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    output_folder = f"frames/{unique_id}"

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    print("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ...")
    video_path = f"videos/{unique_id}/downloaded_video.mp4"
    os.makedirs(os.path.dirname(video_path), exist_ok=True)
    
    download_command = ["yt-dlp", "-o", video_path, video_url]
    result = subprocess.run(download_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    if result.returncode != 0:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.")
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤
    print("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤...")
    extract_frames(video_path, output_folder, frame_rate)

    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–¥—Ä–æ–≤
    frame_count = count_frames(output_folder)
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    input("‚èé –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–¥—Ä—ã...")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
    frame_links = generate_github_links(output_folder)

    print("\nüîó **–°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–¥—Ä—ã:**")
    for link in frame_links:
        print(link)

if __name__ == "__main__":
    main()
