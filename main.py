import os
import subprocess
import uuid
import re
import json

def download_video(video_url, output_folder):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –ø—É—Ç—å."""
    os.makedirs(output_folder, exist_ok=True)
    video_id = str(uuid.uuid4())  
    video_path = f"{output_folder}/{video_id}/downloaded_video.mp4"
    os.makedirs(os.path.dirname(video_path), exist_ok=True)

    command = [
        "yt-dlp",
        "-o", video_path,
        "-f", "mp4",
        video_url
    ]

    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True)
        print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {video_path}")
        return video_id, video_path
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ:\n{e.stderr}")
        return None, None

def extract_frames(video_path, output_folder, frame_rate):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
    if not os.path.exists(video_path):
        print("‚ùå –û—à–∏–±–∫–∞: –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return 0

    os.makedirs(output_folder, exist_ok=True)

    command = [
        "ffmpeg",
        "-i", video_path,
        "-vf", f"fps=1/{frame_rate}",
        f"{output_folder}/frame_%04d.png"
    ]

    try:
        result = subprocess.run(command, check=True, capture_output=True, text=True)

        # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–¥—Ä–æ–≤
        frame_files = sorted(
            [f for f in os.listdir(output_folder) if re.match(r'frame_\d+\.png', f)]
        )
        frame_count = len(frame_files)

        if frame_count == 0:
            print("‚ö†Ô∏è –ö–∞–¥—Ä—ã –Ω–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã!")
            return 0

        print(f"üì∏ –ò–∑–≤–ª–µ—á–µ–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤")
        return frame_count
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–∞–¥—Ä–æ–≤:\n{e.stderr}")
        return 0

def generate_github_links(folder_name, frame_count):
    """–°–æ–∑–¥–∞—ë—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –≤ GitHub."""
    base_url = "https://github.com/juliakriv0137/video-frames/blob/main"

    frame_links = [
        f"{base_url}/{folder_name}/frame_{i:04d}.png?raw=true"
        for i in range(1, frame_count + 1)
    ]

    return frame_links

def get_validated_input(prompt, expected_type):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö."""
    while True:
        user_input = input(prompt).strip()
        
        if expected_type == "url":
            if user_input.startswith("http"):
                return user_input
            else:
                print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!")

        elif expected_type == "int":
            try:
                value = int(user_input)
                if value > 0:
                    return value
                else:
                    print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

def main():
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    video_url = get_validated_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Instagram –∏–ª–∏ YouTube: ", "url")
    frame_rate = get_validated_input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö): ", "int")

    output_folder = "videos"
    frame_folder = "frames"

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    video_id, video_path = download_video(video_url, output_folder)
    if not video_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
        return

    # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä—ã
    frame_output_folder = f"{frame_folder}/{video_id}"
    frame_count = extract_frames(video_path, frame_output_folder, frame_rate)

    if frame_count == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–¥—Ä—ã.")
        return

    # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–¥—Ä—ã
    frame_links = generate_github_links(video_id, frame_count)

    # 4. –í—ã–≤–æ–¥ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("\nüîó –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–¥—Ä—ã (–ø–µ—Ä–≤—ã–µ 5):")
    for link in frame_links[:5]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(link)

    input("\n‚úÖ –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫–∏ –≤—ã—à–µ. –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ GPT...")

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GPT —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    result = {
        "summary": f"‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –ò–∑–≤–ª–µ—á–µ–Ω–æ {frame_count} –∫–∞–¥—Ä–æ–≤.",
        "frames_urls": frame_links
    }

    print(json.dumps(result, indent=4, ensure_ascii=False))  # ensure_ascii=False –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

if __name__ == "__main__":
    main()
